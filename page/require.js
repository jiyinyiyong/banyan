// Generated by CoffeeScript 1.4.0
var require;

require = (function() {
  var curr_src, get_base, join, module_cache, src_elems, url$;
  String.prototype.__defineGetter__('end', function() {
    var end;
    end = this.length - 1;
    return this[end];
  });
  module_cache = {};
  url$ = function(path) {
    return path.match(/^https?:\/\/\S$/) != null;
  };
  src_elems = document.getElementsByTagName('script');
  curr_src = src_elems[src_elems.length - 1].src;
  get_base = function(path) {
    if (path.length === 0) {
      "";

    }
    while (path.end === "/") {
      path = path.slice(0, -1);
    }
    while (path.end !== "/") {
      path = path.slice(0, -1);
    }
    return path;
  };
  join = function(base, path) {
    if (path[0] === "/") {
      path;

    } else {
      if (base.end !== '/') {
        base += "/";
      }
      while (path[0] === '.') {
        if (path.slice(0, 2) === './') {
          path = path.slice(2);
        } else if (path.slice(0, 3) === '../') {
          path = path.slice(3);
          if (base.length > 0) {
            base = base.slice(0, -1);
            while (base.end !== '/') {
              base = base.slice(0, -1);
            }
          } else {
            throw new Error("Can not solve " + base + "/" + path);
          }
        }
      }
    }
    path = path.replace(/\/\.\//g, "/").replace(/\/[^\/]+\/\.\.\//, "/");
    return (get_base(base)) + path;
  };
  return function(name) {
    var code, path, req;
    path = join(curr_src, name);
    req = new XMLHttpRequest;
    req.open('get', path, false);
    req.send();
    code = "(function(){\n";
    code += "var exports = {};";
    code += "" + req.responseText;
    code += "\nreturn exports;\n})()";
    return require[path] = eval(code);
  };
})();
