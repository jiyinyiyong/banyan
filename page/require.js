// Generated by CoffeeScript 1.6.1
var require;

require = (function() {
  var curr_src, func, get, get_base, get_ext, join_path, url$;
  String.prototype.__defineGetter__('end', function() {
    return this[this.length - 1];
  });
  Array.prototype.__defineGetter__('end', function() {
    return this[this.length - 1];
  });
  NodeList.prototype.__defineGetter__('end', function() {
    return this[this.length - 1];
  });
  url$ = function(path) {
    return path.match(/^https?:\/\/\S+$/) != null;
  };
  curr_src = document.getElementsByTagName('script').end.src;
  get_base = function(path) {
    if (path.length === 0) {
      "";
    }
    while ((path.end != null) && (path.end === "/")) {
      path = path.slice(0, -1);
    }
    while (!((path.end === "/") || (!path.end))) {
      path = path.slice(0, -1);
    }
    return path;
  };
  join_path = function(curr_path, name) {
    var base;
    base = get_base(curr_path);
    while ((base.end != null) && base.end === "/") {
      base = base.slice(0, -1);
    }
    while ((name[0] != null) && name[0] === "/") {
      name = name.slice(1);
    }
    return "" + base + "/" + name;
  };
  get_ext = function(path) {
    var match;
    match = path.match(/\.\w+$/);
    if (match != null) {
      return match[0].slice(1);
    } else {
      return "";
    }
  };
  get = function(url) {
    var req;
    req = new XMLHttpRequest;
    req.open("get", url, false);
    req.send();
    return req.responseText;
  };
  func = function(code, path_str, name) {
    return "(function(){\n" + ("var module = {path: " + path_str + "};\n") + "require.stack.push(module.path);\n" + "var exports = {};\n" + ("" + code + "\n") + "require.stack.pop();\n" + "return exports;\n})()\n" + ("//@ sourceURL=" + name);
  };
  require = function(name) {
    var base, extname, path, path_str, source;
    base = require.stack.end;
    path = require.map[name] != null ? require.map[name] : !url$(name) ? join_path(base, name) : name;
    if (require.cache[path] == null) {
      path_str = JSON.stringify(path);
      source = get(path);
      extname = get_ext(path);
      if (!require.cache[path]) {
        require.cache[path] = {};
      }
      require.cache[path] = (function() {
        switch (extname) {
          case "js":
            return eval(func(source, path_str, name));
          case "json":
            return JSON.parse(source);
          default:
            return source;
        }
      })();
    }
    return require.cache[path];
  };
  require.map = {};
  require.cache = {};
  require.stack = [curr_src];
  require.resolve = function(name) {
    return join_path(require.stack.end, name);
  };
  return require;
})();

(function() {
  var entry, script;
  script = document.getElementsByTagName("script").end;
  entry = script.getAttribute("entry");
  return require(entry);
})();
